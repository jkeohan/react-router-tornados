{"version":3,"sources":["components/Header.js","components/Home.js","components/players.js","components/FullRoster.js","components/Player.js","components/Roster.js","components/Schedule.js","components/Main.js","App.js","serviceWorker.js","index.js"],"names":["Header","aStyles","padding","style","height","display","src","alt","to","Home","Fragment","PlayerAPI","players","number","name","position","FullPlayer","props","console","log","map","d","i","key","onClick","handleClick","Player","playerInfo","Roster","findPlayer","activePlayer","filter","setState","prevState","state","exact","path","render","FullRoster","React","Component","Schedule","Main","component","App","className","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8a45fa12.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom'\n\nfunction Header() {\n\n  let imageStyles = {\n    'max-height': '100%'\n  }\n\n  let ulStyles = {\n    display:'flex',\n    'list-style': 'none'\n  }\n\n  let navStyles = {\n    height:'100px',\n    display: 'flex',\n   'justify-content': 'space-between',\n    padding: '20px'\n  }\n\n  let aStyles = {\n    padding: '25px'\n  }\n\n  return (\n     <nav style={navStyles}>\n     <img\n      style={imageStyles}\n      src=\"http://hdvgraphics.com/logo/logoimages/tornado.jpg\" alt='tornado'/>\n      <ul style={ulStyles}>\n       <li><Link to=\"/\" style={aStyles}>Home</Link></li>\n       <li><Link to=\"/roster\" style={aStyles}>Roster</Link></li>\n       <li><Link to=\"/schedule\" style={aStyles}>Schedule</Link></li>\n      </ul>\n     </nav>\n  );\n}\n\nexport default Header;\n","import React from 'react';\n\nfunction Home() {\n  return (\n    <React.Fragment>\n      <h1>Welcome to the Tornados Website</h1>\n    </React.Fragment>\n  );\n}\n\nexport default Home;\n","const PlayerAPI = {\n  players: [\n    { number: 1, name: \"Ben Blocker\", position: \"G\" },\n    { number: 2, name: \"Dave Defender\", position: \"D\" },\n    { number: 3, name: \"Sam Sweeper\", position: \"D\" },\n    { number: 4, name: \"Matt Midfielder\", position: \"M\" },\n    { number: 5, name: \"William Winger\", position: \"M\" },\n    { number: 6, name: \"Fillipe Forward\", position: \"F\" }\n  ]\n}\n\nexport default PlayerAPI\n","import React from 'react';\nimport { Link } from 'react-router-dom'\n\nfunction FullPlayer(props) {\n    console.log('this is FullPlayer - props', props)\n    let players =  props.players.players.map( (d,i) => {\n      return <li\n        key={i}\n        onClick={() => props.handleClick(d.number)}\n      >\n        <Link to={`/roster/${d.number}`}>{d.name}</Link>\n      </li>\n    })\n  return (\n    <ul>\n      {players}\n    </ul>\n  );\n}\n\nexport default  FullPlayer\n","import React from 'react';\nimport {Link} from 'react-router-dom'\n\nfunction Player(props) {\n  console.log('this is props from Player', props.playerInfo)\n  if(!props.playerInfo) {\n    return (<div>Player Not Found</div>)\n  }\n  return (\n    <div>\n      <h1>{props.playerInfo.name} (#{props.playerInfo.number})</h1>\n      <h2>Position: {props.playerInfo.position}</h2>\n      <button><Link to='/roster'>Back</Link></button>\n      <Link to='/'>Home</Link>\n    </div>\n  );\n}\n\nexport default  Player\n","import React from 'react';\nimport players from './players'\nimport FullRoster from './FullRoster'\nimport Player from './Player'\nimport { Switch, Route } from 'react-router-dom'\n\n// Originally this was a functional component however the need to\n// pass a value back up to Roster from FullRoster required that it\n// be upgraded to a Class Based Component\nclass Roster extends React.Component {\n\n  constructor() {\n    super()\n    this.state = {\n      activePlayer: []\n    }\n  }\n\nhandleClick = (number) => {\n  console.log('this is handleClick', number)\n  this.findPlayer(number)\n}\n\nfindPlayer = (number) => {\n  // console.log('this is players variable', players)\n  let activePlayer = players.players.filter( d => d.number === number)\n  console.log('this is activePlayer', activePlayer)\n  this.setState(prevState => ({\n    activePlayer\n  }))\n}\n\nrender() {\n    return (\n      <Switch>\n        <Route exact path='/roster'\n          render={(props) => <FullRoster {...props}\n          players={players}\n          handleClick={this.handleClick}\n          />}\n        />\n        <Route exact path='/roster/:id'\n          render={(props) => <Player {...props}\n          playerInfo={this.state.activePlayer[0]}\n          />}\n        />\n      </Switch>\n    )\n  }\n}\n\nexport default  Roster\n","import React from 'react';\n\nfunction Schedule() {\n  return (\n    <div>\n      <ul>\n        <li>6/5 @ Evergreens</li>\n        <li>6/8 vs Kickers</li>\n        <li>6/14 @ United</li>\n      </ul>\n    </div>\n  );\n}\n\nexport default  Schedule\n","import React from 'react';\nimport { Switch, Route } from 'react-router-dom'\nimport Home from './Home'\nimport Roster from './Roster'\nimport Schedule from './Schedule'\n// what is switch doing?\n// return the first matching route\n\nfunction Main() {\n  return (\n     <main>\n      <Switch>\n        <Route exact path='/' component={Home} />\n        <Route path='/roster' component={Roster} />\n        <Route path='/schedule' component={Schedule} />\n      </Switch>\n     </main>\n  );\n}\n\nexport default  Main\n","import React from 'react';\nimport './App.css';\nimport Header from './components/Header'\nimport Main from './components/Main'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n     <Header />\n     <Main />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n// this is done once at the root level of the app\nimport { BrowserRouter as Router } from\n'react-router-dom'\n\nReactDOM.render(\n  <Router>\n    <App />\n  </Router>\n  , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}